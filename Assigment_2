//Task 1
#include <iostream>

using namespace std;

int main()
{
    int n;
    cin >> n;
    int cnt = 0;
    int arr[n];
    for (int i = 0; i < n; i++){
        cin >> arr[i];
    }
    for (int i = 0; i < n; i++){
        for (int j = i+1; j < n; j++){
            if (arr[i] == arr[j]){
                cnt++;
            }
        }
    }
    cout << cnt;
}


//Task2
#include <iostream>
#include <string>
using namespace std;

class Node {
public:
    int data;
    Node* next;
};

class LinkedList{
public:
    Node* head;

    LinkedList();
    ~LinkedList();
    void insert(int p, int x);
    void del(int p);
    void print();
};

LinkedList::LinkedList(){
    this->head = NULL;
}

LinkedList::~LinkedList(){
    std::cout << "LIST DELETED";
}

void LinkedList::insert(int p, int x){
    Node* node = new Node();
    node->data = x;
    
    if (p==0) {
        node->next = this->head;
        this->head = node;
    } else {
        Node* currentNode;
        currentNode = this->head;
        for (int i = 1; i < p; i++) {
            currentNode = currentNode->next;
        }
        node->next = currentNode->next;
        currentNode->next = node;
    }
}

void LinkedList::del(int p){
    if (p == 0) {
        this->head = this->head->next;
    } else {
        Node* currentNode = this->head;
        for (int i = 1; i < p; i++) {
            currentNode = currentNode->next;
        }
        currentNode->next = currentNode->next->next;
    }
}

void LinkedList::print(){
    Node* head = this->head;
    while(head){
        cout << head->data;
        if (head->next) {
            cout << " ";
        }
        head = head->next;
    }
    cout << endl;
}

int main()
{
    LinkedList* list = new LinkedList();
    int n;
    cin >> n;
    
    string command;
    int p, x;
    for (int i = 0; i < n; i++) {
        cin >> command;
        if (command == "insert") {
            cin >> p >> x;
            list->insert(p, x);
        } else {
            cin >> p;
            list->del(p);
        }
    }
    list->print();
}



//Task 3
#include<bits/stdc++.h>
using namespace std;
struct Node {
    int data;
    struct Node *prev;
    struct Node *next;
};

struct doublyLinkedList {
	Node *head;
	Node *tail;
};

struct Node* tail = NULL;
struct Node* head = NULL;

void insert(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data=data;
    if(head==NULL) {
        newNode->next=NULL;
        newNode->prev=NULL;
        head=newNode;
        tail=newNode;
    }
    else {
        tail->next=newNode;
        newNode->prev=tail;
        tail=newNode;
        newNode->next=NULL;
    }
}


int countTriplets() {
    int count=0;
    Node *current = head->next;
    int sum;
    while(current!=tail) {
            sum=0;
            sum=current->prev->data + current->data + current->next->data;
        if (sum == 0) count++;
        current=current->next;
        
    }
    return count;
}

int main () {
    int n;
    cin>>n;
    int data;
    if (n<3) {
    	cout<<"0";
	} else{
		for(int i=0;i<n;i++){
        cin>>data;
        insert(data);
		}
		cout<<countTriplets();
	}
    
    
    return 0;
}

//Task 4
#include <bits/stdc++.h>
using namespace std;

int main(){
	queue<int> q;
	int n;
	cin>>n;
	string s;
	int x;
	for (int i=0; i<n; i++){
		cin>>s;
		if (s=="enqueue"){
			cin>>x;
			q.push(x);
		} else {
			q.pop();
		}
	}
	while (!q.empty()){
		cout<<q.front()<<" ";
		q.pop();
	}
}


//Task 5

#include <bits/stdc++.h>
using namespace std;

int main()
{
    stack<int> s;
    int n;
    cin >> n;
    
    string command;
    int x;
    for (int i = 0; i < n; i++) {
        cin >> command;
        if (command == "push") {
            cin >> x;
            s.push(x);
        } else {
            s.pop();
        }
    }
    stack<int> result;
    while (!s.empty()) {
        result.push(s.top());
        s.pop();    
    }
    while (!result.empty()) {
        cout << result.top() << " ";
        result.pop();    
    }
}
